// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/storage/db/playing_list.dart';
import 'data/storage/db/user_cache.dart';
import 'data/storage/db/video_cache.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 8753015523964944818),
    name: 'UserCache',
    lastPropertyId: const obx_int.IdUid(5, 7920657660407571209),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7165313859881720012),
        name: 'createTime',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 57281120762312246),
        name: 'uid',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8409501472708029323),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7920657660407571209),
        name: 'face',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 9101852769265143955),
    name: 'VideoCache',
    lastPropertyId: const obx_int.IdUid(5, 5733316144038434723),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3531189421015518682),
        name: 'createTime',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3591105845478230456),
        name: 'aid',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2066572321470662298),
        name: 'uid',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1307394828569993099),
        name: 'cover',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5733316144038434723),
        name: 'title',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 8854311529935429014),
    name: 'PlayList',
    lastPropertyId: const obx_int.IdUid(3, 3213437082390567364),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6537568825792110279),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1043767756642550178),
        name: 'videoBvid',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(13, 153380712576808606),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3213437082390567364),
        name: 'pIndex',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(11, 8854311529935429014),
    lastIndexId: const obx_int.IdUid(13, 153380712576808606),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      4144766861759632038,
      5011249782944454734,
      4808068849834514147,
      145966563019740592,
      8281226633758919470,
      1425180573193024273,
      2615102557500667439,
      9087976770484588266,
    ],
    retiredIndexUids: const [
      706454677925149139,
      5276691650306344345,
      255944737574800928,
      3388504303169534505,
    ],
    retiredPropertyUids: const [
      4295534052259027896,
      7590456474538798771,
      3466468013643730650,
      3924128876389725682,
      4000483482357399219,
      3142002938076671921,
      6585653086042294038,
      7543916070184865744,
      9067688441273612214,
      2575099268391880819,
      8942742389953520949,
      5038660691580996326,
      5620446314779708820,
      725012891670834825,
      2572149654795912201,
      1217955943914453395,
      798707477267618306,
      7785965567376151885,
      1861828337667699590,
      2467590940185550030,
      4094271318975948036,
      8643184718995926956,
      4120158937299002820,
      9088662655966203828,
      4174118377010655640,
      1231164931608611312,
      2338566483247065038,
      5035819596848777806,
      8260306341043935226,
      6643642888625915864,
      2651883892652941226,
      7331857194261361784,
      7896839780655540024,
      1611489861455213206,
      7745695066900712911,
      5484655260173772268,
      6340893942010411594,
      582090623873738899,
      2765163620577756929,
      5588263760154028756,
      7607848631725694668,
      2326691696706420225,
      4572388630988641386,
      8361475883246142604,
      1392319442978057200,
      1992024668398303590,
      3571180636611359510,
      3989177563202918194,
      4905079488293511305,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    UserCache: obx_int.EntityDefinition<UserCache>(
      model: _entities[0],
      toOneRelations: (UserCache object) => [],
      toManyRelations: (UserCache object) => {},
      getId: (UserCache object) => object.uid,
      setId: (UserCache object, int id) {
        object.uid = id;
      },
      objectToFB: (UserCache object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final faceOffset = fbb.writeString(object.face);
        fbb.startTable(6);
        fbb.addInt64(1, object.createTime);
        fbb.addInt64(2, object.uid);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, faceOffset);
        fbb.finish(fbb.endTable());
        return object.uid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final uidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final faceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object =
            UserCache(uid: uidParam, name: nameParam, face: faceParam)
              ..createTime = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                6,
                0,
              );

        return object;
      },
    ),
    VideoCache: obx_int.EntityDefinition<VideoCache>(
      model: _entities[1],
      toOneRelations: (VideoCache object) => [],
      toManyRelations: (VideoCache object) => {},
      getId: (VideoCache object) => object.aid,
      setId: (VideoCache object, int id) {
        object.aid = id;
      },
      objectToFB: (VideoCache object, fb.Builder fbb) {
        final coverOffset = fbb.writeString(object.cover);
        final titleOffset = fbb.writeString(object.title);
        fbb.startTable(6);
        fbb.addInt64(0, object.createTime);
        fbb.addInt64(1, object.aid);
        fbb.addInt64(2, object.uid);
        fbb.addOffset(3, coverOffset);
        fbb.addOffset(4, titleOffset);
        fbb.finish(fbb.endTable());
        return object.aid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final uidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final aidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final coverParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object =
            VideoCache(
                uid: uidParam,
                aid: aidParam,
                cover: coverParam,
                title: titleParam,
              )
              ..createTime = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                4,
                0,
              );

        return object;
      },
    ),
    PlayList: obx_int.EntityDefinition<PlayList>(
      model: _entities[2],
      toOneRelations: (PlayList object) => [],
      toManyRelations: (PlayList object) => {},
      getId: (PlayList object) => object.id,
      setId: (PlayList object, int id) {
        object.id = id;
      },
      objectToFB: (PlayList object, fb.Builder fbb) {
        final videoBvidOffset = fbb.writeString(object.videoBvid);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, videoBvidOffset);
        fbb.addInt64(2, object.pIndex);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final videoBvidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final pIndexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final object = PlayList(
          id: idParam,
          videoBvid: videoBvidParam,
          pIndex: pIndexParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [UserCache] entity fields to define ObjectBox queries.
class UserCache_ {
  /// See [UserCache.createTime].
  static final createTime = obx.QueryIntegerProperty<UserCache>(
    _entities[0].properties[0],
  );

  /// See [UserCache.uid].
  static final uid = obx.QueryIntegerProperty<UserCache>(
    _entities[0].properties[1],
  );

  /// See [UserCache.name].
  static final name = obx.QueryStringProperty<UserCache>(
    _entities[0].properties[2],
  );

  /// See [UserCache.face].
  static final face = obx.QueryStringProperty<UserCache>(
    _entities[0].properties[3],
  );
}

/// [VideoCache] entity fields to define ObjectBox queries.
class VideoCache_ {
  /// See [VideoCache.createTime].
  static final createTime = obx.QueryIntegerProperty<VideoCache>(
    _entities[1].properties[0],
  );

  /// See [VideoCache.aid].
  static final aid = obx.QueryIntegerProperty<VideoCache>(
    _entities[1].properties[1],
  );

  /// See [VideoCache.uid].
  static final uid = obx.QueryIntegerProperty<VideoCache>(
    _entities[1].properties[2],
  );

  /// See [VideoCache.cover].
  static final cover = obx.QueryStringProperty<VideoCache>(
    _entities[1].properties[3],
  );

  /// See [VideoCache.title].
  static final title = obx.QueryStringProperty<VideoCache>(
    _entities[1].properties[4],
  );
}

/// [PlayList] entity fields to define ObjectBox queries.
class PlayList_ {
  /// See [PlayList.id].
  static final id = obx.QueryIntegerProperty<PlayList>(
    _entities[2].properties[0],
  );

  /// See [PlayList.videoBvid].
  static final videoBvid = obx.QueryStringProperty<PlayList>(
    _entities[2].properties[1],
  );

  /// See [PlayList.pIndex].
  static final pIndex = obx.QueryIntegerProperty<PlayList>(
    _entities[2].properties[2],
  );
}
